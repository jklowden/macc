#! /usr/bin/python3
from __future__ import print_function

import sys, os, getopt, re, copy
from pycparser import c_parser, c_generator, c_ast, parse_file

def formal_ptr_decl( typename, name ):
    type = c_ast.PtrDecl( [], c_ast.TypeDecl( name , [], None, 
                                              c_ast.Struct( typename , None ), 
                                              None)
                         )

    return c_ast.Decl( name , [], [], [], [],
                       type = type, 
                       init=None,
                       bitsize=None
                      )

def formal_val_decl( typename, name ):
    type = c_ast.TypeDecl( name , [], None, c_ast.Struct( typename , None ) )

    return c_ast.Decl( name , [], [], [], [],
                       type = type, 
                       init=None,
                       bitsize=None
                      )

def scalar_of( arg ):
    return c_ast.ID( arg )

def struct_ref_of( struct, member ):
    return c_ast.StructRef( scalar_of(struct), '->', scalar_of(member) )

def function_return( type, value ):
    expr = c_ast.Constant( type, str(value) )
    return c_ast.Return( expr )

def function_call( name, args ):
    return c_ast.FuncCall( c_ast.ID( name ), args=c_ast.ExprList( args ) )

def copy_string( tgt, elem, stmt, ordinal ) :
    args = [ scalar_of(stmt), scalar_of(str(ordinal)) ]    
    args = [ struct_ref_of(tgt, elem),
             function_call('sqlite3_column_text', args) ]
    return function_call( 'strcpy', args )

def assignment( lhs, rhs ):
    return c_ast.Assignment( op = '=', lvalue = lhs, rvalue = rhs )

def copy_int( tgt, elem, stmt, ordinal ) :
    args = [ scalar_of(stmt), scalar_of(str(ordinal)) ]    
    return assignment( struct_ref_of(tgt, elem),
                       function_call('sqlite3_column_int64', args) )

def function_definition( name, params, body, return_type = 'void' ):
    type = c_ast.TypeDecl( name, [], None, 
                           c_ast.IdentifierType( names = [ return_type ] ) )
    decl = c_ast.FuncDecl( c_ast.ParamList( params ), type )
    func = c_ast.FuncDef(
        decl=c_ast.Decl( name , [], [], [], [], decl, None, None ),
        param_decls=None, 
        body=c_ast.Compound( body )
    ) 
    return func

macros = {}

# The produced function has an extra leading argument, which is a map of
# metadata describing all parsed structs. 

def element_count( meta, tgt ):
    struct = meta['sysrow_t']
    args = [ formal_val_decl( struct.name, tgt ) ] 
    body = [ function_return( 'int', len(struct.elems) ) ]
    func = function_definition( 'element_count', args, body, 'int' )
    return func 

def copy_row( meta, stmt, tgt ):
    struct = meta['sysrow_t']
    nodes = []

    for i, elem in enumerate(struct.elems):
        node = None
        if elem.ctype == 'char' and elem.csize > 0:
            node = copy_string( tgt, elem.cname, stmt, i )
        elif elem.ctype == 'int':
            node = copy_int( tgt, elem.cname, stmt, i )
        else:
            raise Exception( "unrecognized type %s" % (elem.ctype) )

        nodes.append(node)
    
    args = [ formal_ptr_decl( 'sqlite3_stmt', stmt ),
             formal_ptr_decl( struct.name,    tgt ) ]
   
    return function_definition( 'copy_row', args, nodes, 'void' )

        
macros['copy_row'] = copy_row
macros['element_count'] = element_count

